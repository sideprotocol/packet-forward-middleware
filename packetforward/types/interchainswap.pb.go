// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packetforward/v1/interchainswap.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InterchainMessageType int32

const (
	InterchainMessageType_Unspecified        InterchainMessageType = 0
	InterchainMessageType_MakePool           InterchainMessageType = 1
	InterchainMessageType_TakePool           InterchainMessageType = 2
	InterchainMessageType_CancelPool         InterchainMessageType = 3
	InterchainMessageType_SingleAssetDeposit InterchainMessageType = 4
	InterchainMessageType_MakeMultiDeposit   InterchainMessageType = 5
	InterchainMessageType_CancelMultiDeposit InterchainMessageType = 6
	InterchainMessageType_TakeMultiDeposit   InterchainMessageType = 7
	InterchainMessageType_MultiWithdraw      InterchainMessageType = 8
	InterchainMessageType_LeftSwap           InterchainMessageType = 9
	InterchainMessageType_RightSwap          InterchainMessageType = 10
)

var InterchainMessageType_name = map[int32]string{
	0:  "Unspecified",
	1:  "MakePool",
	2:  "TakePool",
	3:  "CancelPool",
	4:  "SingleAssetDeposit",
	5:  "MakeMultiDeposit",
	6:  "CancelMultiDeposit",
	7:  "TakeMultiDeposit",
	8:  "MultiWithdraw",
	9:  "LeftSwap",
	10: "RightSwap",
}

var InterchainMessageType_value = map[string]int32{
	"Unspecified":        0,
	"MakePool":           1,
	"TakePool":           2,
	"CancelPool":         3,
	"SingleAssetDeposit": 4,
	"MakeMultiDeposit":   5,
	"CancelMultiDeposit": 6,
	"TakeMultiDeposit":   7,
	"MultiWithdraw":      8,
	"LeftSwap":           9,
	"RightSwap":          10,
}

func (x InterchainMessageType) String() string {
	return proto.EnumName(InterchainMessageType_name, int32(x))
}

func (InterchainMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b7a75b80927e657a, []int{0}
}

// Message equivalent to Go's InterchainSwapPacketData struct
type InterchainSwapPacketData struct {
	Type        InterchainMessageType `protobuf:"varint,1,opt,name=type,proto3,enum=packetforward.v1.InterchainMessageType" json:"type,omitempty"`
	Data        []byte                `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	StateChange []byte                `protobuf:"bytes,3,opt,name=stateChange,proto3" json:"stateChange,omitempty"`
	Memo        []byte                `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (m *InterchainSwapPacketData) Reset()         { *m = InterchainSwapPacketData{} }
func (m *InterchainSwapPacketData) String() string { return proto.CompactTextString(m) }
func (*InterchainSwapPacketData) ProtoMessage()    {}
func (*InterchainSwapPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a75b80927e657a, []int{0}
}
func (m *InterchainSwapPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterchainSwapPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterchainSwapPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterchainSwapPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterchainSwapPacketData.Merge(m, src)
}
func (m *InterchainSwapPacketData) XXX_Size() int {
	return m.Size()
}
func (m *InterchainSwapPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_InterchainSwapPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_InterchainSwapPacketData proto.InternalMessageInfo

func (m *InterchainSwapPacketData) GetType() InterchainMessageType {
	if m != nil {
		return m.Type
	}
	return InterchainMessageType_Unspecified
}

func (m *InterchainSwapPacketData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *InterchainSwapPacketData) GetStateChange() []byte {
	if m != nil {
		return m.StateChange
	}
	return nil
}

func (m *InterchainSwapPacketData) GetMemo() []byte {
	if m != nil {
		return m.Memo
	}
	return nil
}

func init() {
	proto.RegisterEnum("packetforward.v1.InterchainMessageType", InterchainMessageType_name, InterchainMessageType_value)
	proto.RegisterType((*InterchainSwapPacketData)(nil), "packetforward.v1.InterchainSwapPacketData")
}

func init() {
	proto.RegisterFile("packetforward/v1/interchainswap.proto", fileDescriptor_b7a75b80927e657a)
}

var fileDescriptor_b7a75b80927e657a = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0xaa, 0xd3, 0x40,
	0x14, 0xc6, 0x33, 0xf7, 0xc6, 0xeb, 0xbd, 0x73, 0xff, 0x18, 0x87, 0x2a, 0xc1, 0x45, 0x28, 0x82,
	0x58, 0x84, 0x26, 0x54, 0x17, 0x2e, 0x5c, 0x69, 0xbb, 0x50, 0xb0, 0x50, 0xda, 0x8a, 0xe0, 0xee,
	0x34, 0x39, 0x4d, 0x86, 0x26, 0x99, 0x21, 0x33, 0x6d, 0xe8, 0x5b, 0xf8, 0x0a, 0xbe, 0x8d, 0xcb,
	0x2e, 0x5d, 0x96, 0xf6, 0x45, 0x64, 0x26, 0x56, 0x6d, 0xb9, 0xbb, 0xf3, 0x7d, 0xe7, 0xfb, 0x9d,
	0x84, 0x7c, 0xa1, 0x2f, 0x24, 0xc4, 0x0b, 0xd4, 0x73, 0x51, 0xd5, 0x50, 0x25, 0xd1, 0xaa, 0x17,
	0xf1, 0x52, 0x63, 0x15, 0x67, 0xc0, 0x4b, 0x55, 0x83, 0x0c, 0x65, 0x25, 0xb4, 0x60, 0xde, 0x51,
	0x2c, 0x5c, 0xf5, 0x9e, 0xb5, 0x52, 0x91, 0x0a, 0xbb, 0x8c, 0xcc, 0xd4, 0xe4, 0x9e, 0xff, 0x20,
	0xd4, 0xff, 0xf4, 0xf7, 0xc0, 0xa4, 0x06, 0x39, 0xb2, 0xe0, 0x00, 0x34, 0xb0, 0x77, 0xd4, 0xd5,
	0x6b, 0x89, 0x3e, 0x69, 0x93, 0xce, 0xdd, 0xeb, 0x97, 0xe1, 0xe9, 0xcd, 0xf0, 0x1f, 0x39, 0x44,
	0xa5, 0x20, 0xc5, 0xe9, 0x5a, 0xe2, 0xd8, 0x42, 0x8c, 0x51, 0x37, 0x01, 0x0d, 0xfe, 0x59, 0x9b,
	0x74, 0x6e, 0xc6, 0x76, 0x66, 0x6d, 0x7a, 0xad, 0x34, 0x68, 0xec, 0x67, 0x50, 0xa6, 0xe8, 0x9f,
	0xdb, 0xd5, 0xff, 0x96, 0xa1, 0x0a, 0x2c, 0x84, 0xef, 0x36, 0x94, 0x99, 0x5f, 0x6d, 0x09, 0x7d,
	0x72, 0xef, 0x93, 0xd8, 0x23, 0x7a, 0xfd, 0xa5, 0x54, 0x12, 0x63, 0x3e, 0xe7, 0x98, 0x78, 0x0e,
	0xbb, 0xa1, 0x97, 0x43, 0x58, 0xe0, 0x48, 0x88, 0xdc, 0x23, 0x46, 0x4d, 0x0f, 0xea, 0x8c, 0xdd,
	0x51, 0xda, 0x87, 0x32, 0xc6, 0xdc, 0xea, 0x73, 0xf6, 0x94, 0xb2, 0x09, 0x2f, 0xd3, 0x1c, 0xdf,
	0x2b, 0x85, 0x7a, 0x80, 0x52, 0x28, 0xae, 0x3d, 0x97, 0xb5, 0xa8, 0x67, 0x6e, 0x0c, 0x97, 0xb9,
	0xe6, 0x07, 0xf7, 0x81, 0x49, 0x37, 0xf4, 0x91, 0x7f, 0x61, 0xd2, 0xd3, 0xd3, 0xf4, 0x43, 0xf6,
	0x98, 0xde, 0x5a, 0xe7, 0x2b, 0xd7, 0x59, 0x52, 0x41, 0xed, 0x5d, 0x9a, 0x97, 0xf9, 0x8c, 0x73,
	0x6d, 0x3e, 0xb1, 0x77, 0xc5, 0x6e, 0xe9, 0xd5, 0x98, 0xa7, 0x59, 0x23, 0xe9, 0x87, 0xd9, 0xcf,
	0x5d, 0x40, 0x36, 0xbb, 0x80, 0x6c, 0x77, 0x01, 0xf9, 0xbe, 0x0f, 0x9c, 0xcd, 0x3e, 0x70, 0x7e,
	0xed, 0x03, 0xe7, 0xdb, 0xc7, 0x94, 0xeb, 0x6c, 0x39, 0x0b, 0x63, 0x51, 0x44, 0x8a, 0x27, 0x68,
	0x6b, 0x8b, 0x45, 0x1e, 0x35, 0x65, 0x74, 0xff, 0xb4, 0xd1, 0x2d, 0x78, 0x92, 0xe4, 0x58, 0x43,
	0x85, 0xd1, 0xea, 0x6d, 0x74, 0xfc, 0x93, 0x98, 0x3e, 0xd4, 0xec, 0xc2, 0xa2, 0x6f, 0x7e, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x06, 0x75, 0x53, 0x23, 0x42, 0x02, 0x00, 0x00,
}

func (m *InterchainSwapPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterchainSwapPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterchainSwapPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintInterchainswap(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StateChange) > 0 {
		i -= len(m.StateChange)
		copy(dAtA[i:], m.StateChange)
		i = encodeVarintInterchainswap(dAtA, i, uint64(len(m.StateChange)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintInterchainswap(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintInterchainswap(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintInterchainswap(dAtA []byte, offset int, v uint64) int {
	offset -= sovInterchainswap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterchainSwapPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovInterchainswap(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovInterchainswap(uint64(l))
	}
	l = len(m.StateChange)
	if l > 0 {
		n += 1 + l + sovInterchainswap(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovInterchainswap(uint64(l))
	}
	return n
}

func sovInterchainswap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInterchainswap(x uint64) (n int) {
	return sovInterchainswap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterchainSwapPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainswap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterchainSwapPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterchainSwapPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= InterchainMessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterchainswap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateChange", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterchainswap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateChange = append(m.StateChange[:0], dAtA[iNdEx:postIndex]...)
			if m.StateChange == nil {
				m.StateChange = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterchainswap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = append(m.Memo[:0], dAtA[iNdEx:postIndex]...)
			if m.Memo == nil {
				m.Memo = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainswap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterchainswap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInterchainswap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInterchainswap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterchainswap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterchainswap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInterchainswap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInterchainswap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInterchainswap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInterchainswap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInterchainswap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInterchainswap = fmt.Errorf("proto: unexpected end of group")
)
